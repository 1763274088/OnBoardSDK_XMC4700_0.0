<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Blinky.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Blinky.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Wed Oct 18 17:44:37 2017
<BR><P>
<H3>Maximum Stack Usage =        856 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Sls10ere_authenticate &rArr; ECDSA_verify &rArr; ecc_mul_projective &rArr; mont_ecc_mul &rArr; mont_ecc_add
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[a1]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">BusFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[6]">BusFault_Handler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[50]">CAN0_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[51]">CAN0_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[52]">CAN0_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[53]">CAN0_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[54]">CAN0_4_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[55]">CAN0_5_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[56]">CAN0_6_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[57]">CAN0_7_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[34]">CCU40_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[35]">CCU40_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[36]">CCU40_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[37]">CCU40_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[38]">CCU41_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[39]">CCU41_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[3a]">CCU41_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[3b]">CCU41_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[3c]">CCU42_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[3d]">CCU42_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[3e]">CCU42_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[3f]">CCU42_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[40]">CCU43_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[41]">CCU43_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[42]">CCU43_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[43]">CCU43_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[44]">CCU80_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[45]">CCU80_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[46]">CCU80_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[47]">CCU80_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[48]">CCU81_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[49]">CCU81_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[4a]">CCU81_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[4b]">CCU81_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[32]">DAC0_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[33]">DAC0_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[2a]">DSD0_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[2b]">DSD0_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[2c]">DSD0_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[2d]">DSD0_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[2e]">DSD0_4_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[2f]">DSD0_5_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[30]">DSD0_6_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[31]">DSD0_7_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[9]">DebugMon_Handler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[d]">ERU0_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[e]">ERU0_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[f]">ERU0_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[10]">ERU0_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[11]">ERU1_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[12]">ERU1_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[13]">ERU1_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[14]">ERU1_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[6f]">ETH0_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[6b]">FCE0_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[6c]">GPDMA0_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[70]">GPDMA1_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[6a]">LEDTS0_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[5]">MemManage_Handler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[15]">PMU0_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[4c]">POSIF0_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[4d]">POSIF0_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[4e]">POSIF1_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[4f]">POSIF1_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[c]">SCU_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[6d]">SDMMC0_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[77]">Sls10ere_authenticate</a> from sls10ere_crypto.o(i.Sls10ere_authenticate) referenced from sls10ere_crypto.o(i.Sls10ere_RegisterCrypto)
 <LI><a href="#[75]">Sls10ere_generate_challenge</a> from sls10ere_crypto.o(i.Sls10ere_generate_challenge) referenced from sls10ere_crypto.o(i.Sls10ere_RegisterCrypto)
 <LI><a href="#[76]">Sls10ere_generate_checkvalue</a> from sls10ere_crypto.o(i.Sls10ere_generate_checkvalue) referenced from sls10ere_crypto.o(i.Sls10ere_RegisterCrypto)
 <LI><a href="#[74]">Sls10ere_initialize_crypto</a> from sls10ere_crypto.o(i.Sls10ere_initialize_crypto) referenced from sls10ere_crypto.o(i.Sls10ere_RegisterCrypto)
 <LI><a href="#[78]">Sls10ere_mac_verify</a> from sls10ere_crypto.o(i.Sls10ere_mac_verify) referenced from sls10ere_crypto.o(i.Sls10ere_RegisterCrypto)
 <LI><a href="#[73]">Sls10ere_unregister</a> from sls10ere_crypto.o(i.Sls10ere_unregister) referenced from sls10ere_crypto.o(i.Sls10ere_RegisterCrypto)
 <LI><a href="#[b]">SysTick_Handler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[71]">SystemInit</a> from system_xmc4700.o(i.SystemInit) referenced from startup_xmc4700.o(.text)
 <LI><a href="#[6e]">USB0_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[58]">USIC0_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[59]">USIC0_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[5a]">USIC0_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[5b]">USIC0_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[5c]">USIC0_4_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[5d]">USIC0_5_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[5e]">USIC1_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[5f]">USIC1_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[60]">USIC1_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[61]">USIC1_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[62]">USIC1_4_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[63]">USIC1_5_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[64]">USIC2_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[65]">USIC2_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[66]">USIC2_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[67]">USIC2_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[68]">USIC2_4_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[69]">USIC2_5_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[7]">UsageFault_Handler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[16]">VADC0_C0_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[17]">VADC0_C0_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[18]">VADC0_C0_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[19]">VADC0_C0_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[1a]">VADC0_G0_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[1b]">VADC0_G0_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[1c]">VADC0_G0_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[1d]">VADC0_G0_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[1e]">VADC0_G1_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[1f]">VADC0_G1_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[20]">VADC0_G1_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[21]">VADC0_G1_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[22]">VADC0_G2_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[23]">VADC0_G2_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[24]">VADC0_G2_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[25]">VADC0_G2_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[26]">VADC0_G3_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[27]">VADC0_G3_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[28]">VADC0_G3_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[29]">VADC0_G3_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[85]">__main</a> from __main.o(!!!main) referenced from startup_xmc4700.o(.text)
 <LI><a href="#[7c]">dwordvec_163_copy</a> from sls10ere_math.o(i.dwordvec_163_copy) referenced from sls10ere_math.o(i.gf2n_init)
 <LI><a href="#[82]">dwordvec_193_copy</a> from sls10ere_math.o(i.dwordvec_193_copy) referenced from sls10ere_math.o(i.gf2n_init)
 <LI><a href="#[79]">dwordvec_l_shift_163</a> from sls10ere_math.o(i.dwordvec_l_shift_163) referenced from sls10ere_math.o(i.gf2n_init)
 <LI><a href="#[7f]">dwordvec_l_shift_193</a> from sls10ere_math.o(i.dwordvec_l_shift_193) referenced from sls10ere_math.o(i.gf2n_init)
 <LI><a href="#[7d]">gf2_163_add</a> from sls10ere_math.o(i.gf2_163_add) referenced from sls10ere_math.o(i.gf2n_init)
 <LI><a href="#[7e]">gf2_163_mul</a> from sls10ere_math.o(i.gf2_163_mul) referenced from sls10ere_math.o(i.gf2n_init)
 <LI><a href="#[7b]">gf2_163_square</a> from sls10ere_math.o(i.gf2_163_square) referenced from sls10ere_math.o(i.gf2n_init)
 <LI><a href="#[7a]">gf2_163_sum</a> from sls10ere_math.o(i.gf2_163_sum) referenced from sls10ere_math.o(i.gf2n_init)
 <LI><a href="#[83]">gf2_193_add</a> from sls10ere_math.o(i.gf2_193_add) referenced from sls10ere_math.o(i.gf2n_init)
 <LI><a href="#[84]">gf2_193_mul</a> from sls10ere_math.o(i.gf2_193_mul) referenced from sls10ere_math.o(i.gf2n_init)
 <LI><a href="#[81]">gf2_193_square</a> from sls10ere_math.o(i.gf2_193_square) referenced from sls10ere_math.o(i.gf2n_init)
 <LI><a href="#[80]">gf2_193_sum</a> from sls10ere_math.o(i.gf2_193_sum) referenced from sls10ere_math.o(i.gf2n_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[85]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[86]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[88]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[10a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[10b]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[89]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[10c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[91]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[8a]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[10d]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[10e]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[8c]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[10f]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[110]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[111]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[112]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[113]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[114]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[115]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[116]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[117]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[118]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[119]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[11a]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[11b]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[11c]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[11d]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[11e]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[120]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[96]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[121]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[122]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[123]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[124]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[125]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[126]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[127]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[87]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[128]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[8e]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[90]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[129]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[92]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Sls10ere_Run_Test &rArr; Sls10ere_ECC_Test &rArr; Sls10ere_ECC &rArr; Sls10ere_write_challenge_read_response &rArr; Sls10ere_read_response &rArr; SWI_BIFTransReadMultUint8 &rArr; SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[12a]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[a2]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[95]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[12b]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[97]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[eb]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_rand
</UL>

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>CAN0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>CAN0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CAN0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN0_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN0_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CAN0_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CAN0_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CCU40_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CCU40_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>CCU40_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CCU40_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>CCU41_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CCU41_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>CCU41_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CCU41_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CCU42_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>CCU42_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>CCU42_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CCU42_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CCU43_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CCU43_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CCU43_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CCU43_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CCU80_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CCU80_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>CCU80_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>CCU80_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>CCU81_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CCU81_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CCU81_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CCU81_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DAC0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DAC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DSD0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DSD0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DSD0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DSD0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DSD0_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DSD0_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DSD0_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DSD0_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>ERU0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>ERU0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>ERU0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ERU0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>ERU1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>ERU1_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>ERU1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>ERU1_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>ETH0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>FCE0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>GPDMA0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>GPDMA1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>LEDTS0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>MemManage_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PMU0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>POSIF0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>POSIF0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>POSIF1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>POSIF1_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SCU_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>SDMMC0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>USB0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>USIC0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>USIC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>USIC0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>USIC0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>USIC0_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>USIC0_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>USIC1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>USIC1_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>USIC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>USIC1_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>USIC1_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>USIC1_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>USIC2_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>USIC2_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>USIC2_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>USIC2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>USIC2_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>USIC2_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>VADC0_C0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>VADC0_C0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>VADC0_C0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>VADC0_C0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>VADC0_G0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>VADC0_G0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>VADC0_G0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>VADC0_G0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>VADC0_G1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>VADC0_G1_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>VADC0_G1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>VADC0_G1_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>VADC0_G2_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>VADC0_G2_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>VADC0_G2_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>VADC0_G2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>VADC0_G3_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>VADC0_G3_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>VADC0_G3_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>VADC0_G3_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_xmc4700.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[99]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[8d]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_memcpy
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[9a]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[12c]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_memset
</UL>

<P><STRONG><a name="[12d]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[130]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[9d]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[134]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[8f]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[94]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[137]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[138]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[a3]"></a>ECDSA_verify</STRONG> (Thumb, 360 bytes, Stack size 272 bytes, sls10ere_math.o(i.ECDSA_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = ECDSA_verify &rArr; ecc_mul_projective &rArr; mont_ecc_mul &rArr; mont_ecc_add
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfp_divide
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_on_curve
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_mul_projective
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_add_point_x
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_sub
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_iszero
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_authenticate
</UL>

<P><STRONG><a name="[f0]"></a>OSCHP_GetFrequency</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_xmc4700.o(i.OSCHP_GetFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockSetup
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[b4]"></a>SWI_BIFDelay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board.o(i.SWI_BIFDelay))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_wait_wr_done
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_EINT
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_write_challenge_read_response
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_pass
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_output
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_fail
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_WakeUpFromPWDN
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_HardRST
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReceiveWord
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DIP1
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DIP0
</UL>

<P><STRONG><a name="[f3]"></a>SWI_BIFHALSetTauSWI_BIF</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, swi_hal.o(i.SWI_BIFHALSetTauSWI_BIF))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[af]"></a>SWI_BIFTransReadMultUint8</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, swi_hal.o(i.SWI_BIFTransReadMultUint8))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SWI_BIFTransReadMultUint8 &rArr; SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReceiveWord
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_read_response
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_read_ODC
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_read_data
</UL>

<P><STRONG><a name="[b2]"></a>SWI_BIFTransReadUint16</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, swi_hal.o(i.SWI_BIFTransReadUint16))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SWI_BIFTransReadUint16 &rArr; SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReceiveWord
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_write_data
</UL>

<P><STRONG><a name="[b3]"></a>SWI_BIFTransReadUint8</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, swi_hal.o(i.SWI_BIFTransReadUint8))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SWI_BIFTransReadUint8 &rArr; SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReceiveWord
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_wait_wr_done
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_write_challenge_read_response
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_write_data
</UL>

<P><STRONG><a name="[ba]"></a>SWI_BIFTransWriteMultUint8</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, swi_hal.o(i.SWI_BIFTransWriteMultUint8))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SWI_BIFTransWriteMultUint8 &rArr; SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_write_challenge
</UL>

<P><STRONG><a name="[bb]"></a>SWI_BIFTransWriteUint16</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, swi_hal.o(i.SWI_BIFTransWriteUint16))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SWI_BIFTransWriteUint16 &rArr; SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_write_data
</UL>

<P><STRONG><a name="[bc]"></a>SWI_BIFTransWriteUint8</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, swi_hal.o(i.SWI_BIFTransWriteUint8))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SWI_BIFTransWriteUint8 &rArr; SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_write_challenge_read_response
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_write_data
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
</UL>

<P><STRONG><a name="[bd]"></a>SWI_BIFTrans_Abort_EINT</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, swi_hal.o(i.SWI_BIFTrans_Abort_EINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SWI_BIFTrans_Abort_EINT &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pin_dir
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pin
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_EINT
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DIP1
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DIP0
</UL>

<P><STRONG><a name="[bf]"></a>SWI_BIFTrans_DIE0</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, swi_hal.o(i.SWI_BIFTrans_DIE0))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SWI_BIFTrans_DIE0 &rArr; SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
</UL>

<P><STRONG><a name="[c0]"></a>SWI_BIFTrans_DIE1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, swi_hal.o(i.SWI_BIFTrans_DIE1))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SWI_BIFTrans_DIE1 &rArr; SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
</UL>

<P><STRONG><a name="[c1]"></a>SWI_BIFTrans_DIP0</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, swi_hal.o(i.SWI_BIFTrans_DIP0))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SWI_BIFTrans_DIP0 &rArr; SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFDelay
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_Abort_EINT
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
</UL>

<P><STRONG><a name="[c2]"></a>SWI_BIFTrans_DIP1</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, swi_hal.o(i.SWI_BIFTrans_DIP1))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SWI_BIFTrans_DIP1 &rArr; SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFDelay
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_Abort_EINT
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
</UL>

<P><STRONG><a name="[c3]"></a>SWI_BIFTrans_DISS</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, swi_hal.o(i.SWI_BIFTrans_DISS))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SWI_BIFTrans_DISS &rArr; SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
</UL>

<P><STRONG><a name="[c4]"></a>SWI_BIFTrans_EINT</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, swi_hal.o(i.SWI_BIFTrans_EINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SWI_BIFTrans_EINT &rArr; SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFDelay
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_Abort_EINT
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_wait_wr_done
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_write_challenge_read_response
</UL>

<P><STRONG><a name="[c5]"></a>SWI_BIFTrans_HardRST</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, swi_hal.o(i.SWI_BIFTrans_HardRST))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SWI_BIFTrans_HardRST &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pin_dir
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pin
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_Test_Init
</UL>

<P><STRONG><a name="[c6]"></a>SWI_BIFTrans_SDA</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, swi_hal.o(i.SWI_BIFTrans_SDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SWI_BIFTrans_SDA &rArr; SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_ECC_Test
</UL>

<P><STRONG><a name="[c7]"></a>SWI_BIFTrans_WD</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, swi_hal.o(i.SWI_BIFTrans_WD))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SWI_BIFTrans_WD &rArr; SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_write_data
</UL>

<P><STRONG><a name="[c8]"></a>SWI_BIFTrans_WakeUpFromPWDN</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, swi_hal.o(i.SWI_BIFTrans_WakeUpFromPWDN))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SWI_BIFTrans_WakeUpFromPWDN &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pin_dir
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pin
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_Test_Init
</UL>

<P><STRONG><a name="[c9]"></a>Sls10ere_ECC</STRONG> (Thumb, 180 bytes, Stack size 208 bytes, sls10ere_auth.o(i.Sls10ere_ECC))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Sls10ere_ECC &rArr; Sls10ere_write_challenge_read_response &rArr; Sls10ere_read_response &rArr; SWI_BIFTransReadMultUint8 &rArr; SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_RegisterCrypto
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_write_challenge_read_response
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_read_ODC
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_ECC_Test
</UL>

<P><STRONG><a name="[cd]"></a>Sls10ere_ECC_Test</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, test_case.o(i.Sls10ere_ECC_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = Sls10ere_ECC_Test &rArr; Sls10ere_ECC &rArr; Sls10ere_write_challenge_read_response &rArr; Sls10ere_read_response &rArr; SWI_BIFTransReadMultUint8 &rArr; SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_ECC
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_SDA
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_Run_Test
</UL>

<P><STRONG><a name="[ce]"></a>Sls10ere_NVM_Test</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, test_case.o(i.Sls10ere_NVM_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Sls10ere_NVM_Test &rArr; Sls10ere_nvm_write_data &rArr; Sls10ere_nvm_read_data &rArr; SWI_BIFTransReadMultUint8 &rArr; SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_write_data
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_Run_Test
</UL>

<P><STRONG><a name="[ca]"></a>Sls10ere_RegisterCrypto</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, sls10ere_crypto.o(i.Sls10ere_RegisterCrypto))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Sls10ere_RegisterCrypto &rArr; Sls10ere_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_memset
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_ECC
</UL>

<P><STRONG><a name="[d3]"></a>Sls10ere_Run_Test</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, test_case.o(i.Sls10ere_Run_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = Sls10ere_Run_Test &rArr; Sls10ere_ECC_Test &rArr; Sls10ere_ECC &rArr; Sls10ere_write_challenge_read_response &rArr; Sls10ere_read_response &rArr; SWI_BIFTransReadMultUint8 &rArr; SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_pass
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_output
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_fail
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_NVM_Test
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_ECC_Test
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>Sls10ere_SWI_BIF_search_ids</STRONG> (Thumb, 586 bytes, Stack size 152 bytes, sls10ere_swi_bif.o(i.Sls10ere_SWI_BIF_search_ids))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = Sls10ere_SWI_BIF_search_ids &rArr; SWI_BIFTransWriteUint8 &rArr; SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransWriteUint8
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DISS
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DIP1
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DIP0
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DIE1
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DIE0
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ub_SizeOfStack
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_push
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_pop
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_UidSearch_SetDipDoneBit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_UidSearch_SetDIE1Info
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_UidSearch_SetDIE0Info
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_UidSearch_GetDipDoneBit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_UidSearch_GetDIE1Info
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_UidSearch_GetDIE0Info
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_Test_Init
</UL>

<P><STRONG><a name="[e1]"></a>Sls10ere_Test_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, test_case.o(i.Sls10ere_Test_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = Sls10ere_Test_Init &rArr; Sls10ere_SWI_BIF_search_ids &rArr; SWI_BIFTransWriteUint8 &rArr; SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timing_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_fail
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_WakeUpFromPWDN
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_HardRST
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>Sls10ere_nvm_read_data</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, sls10ere_nvm.o(i.Sls10ere_nvm_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Sls10ere_nvm_read_data &rArr; SWI_BIFTransReadMultUint8 &rArr; SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReadMultUint8
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_write_data
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_NVM_Test
</UL>

<P><STRONG><a name="[ea]"></a>Sls10ere_nvm_wait_wr_done</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, sls10ere_nvm.o(i.Sls10ere_nvm_wait_wr_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Sls10ere_nvm_wait_wr_done &rArr; SWI_BIFTransReadUint8 &rArr; SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_EINT
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReadUint8
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_write_data
</UL>

<P><STRONG><a name="[d0]"></a>Sls10ere_nvm_write_data</STRONG> (Thumb, 620 bytes, Stack size 72 bytes, sls10ere_nvm.o(i.Sls10ere_nvm_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Sls10ere_nvm_write_data &rArr; Sls10ere_nvm_read_data &rArr; SWI_BIFTransReadMultUint8 &rArr; SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_WD
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransWriteUint16
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReadUint16
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_wait_wr_done
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransWriteUint8
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReadUint8
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_NVM_Test
</UL>

<P><STRONG><a name="[cb]"></a>Sls10ere_read_ODC</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, sls10ere_auth.o(i.Sls10ere_read_ODC))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Sls10ere_read_ODC &rArr; SWI_BIFTransReadMultUint8 &rArr; SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReadMultUint8
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_ECC
</UL>

<P><STRONG><a name="[ec]"></a>Sls10ere_read_response</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, sls10ere_auth.o(i.Sls10ere_read_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Sls10ere_read_response &rArr; SWI_BIFTransReadMultUint8 &rArr; SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReadMultUint8
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_write_challenge_read_response
</UL>

<P><STRONG><a name="[ed]"></a>Sls10ere_write_challenge</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, sls10ere_auth.o(i.Sls10ere_write_challenge))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Sls10ere_write_challenge &rArr; SWI_BIFTransWriteMultUint8 &rArr; SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransWriteMultUint8
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_write_challenge_read_response
</UL>

<P><STRONG><a name="[cc]"></a>Sls10ere_write_challenge_read_response</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, sls10ere_auth.o(i.Sls10ere_write_challenge_read_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Sls10ere_write_challenge_read_response &rArr; Sls10ere_read_response &rArr; SWI_BIFTransReadMultUint8 &rArr; SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_EINT
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransWriteUint8
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReadUint8
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_write_challenge
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_read_response
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_ECC
</UL>

<P><STRONG><a name="[ee]"></a>SystemCoreClockSetup</STRONG> (Thumb, 470 bytes, Stack size 8 bytes, system_xmc4700.o(i.SystemCoreClockSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemCoreClockSetup &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCHP_GetFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[f1]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, system_xmc4700.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCHP_GetFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockSetup
</UL>

<P><STRONG><a name="[f2]"></a>SystemCoreSetup</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, system_xmc4700.o(i.SystemCoreSetup))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[71]"></a>SystemInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, system_xmc4700.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit &rArr; SystemCoreClockSetup &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreSetup
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(.text)
</UL>
<P><STRONG><a name="[104]"></a>XMC_GPIO_SetMode</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, xmc_gpio.o(i.XMC_GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = XMC_GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pin_dir
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_pass
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_fail
</UL>

<P><STRONG><a name="[de]"></a>b_UidSearch_GetDIE0Info</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sls10ere_swi_bif.o(i.b_UidSearch_GetDIE0Info))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
</UL>

<P><STRONG><a name="[df]"></a>b_UidSearch_GetDIE1Info</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sls10ere_swi_bif.o(i.b_UidSearch_GetDIE1Info))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
</UL>

<P><STRONG><a name="[d8]"></a>b_UidSearch_GetDipDoneBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sls10ere_swi_bif.o(i.b_UidSearch_GetDipDoneBit))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
</UL>

<P><STRONG><a name="[da]"></a>b_UidSearch_SetDIE0Info</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sls10ere_swi_bif.o(i.b_UidSearch_SetDIE0Info))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
</UL>

<P><STRONG><a name="[db]"></a>b_UidSearch_SetDIE1Info</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sls10ere_swi_bif.o(i.b_UidSearch_SetDIE1Info))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
</UL>

<P><STRONG><a name="[dc]"></a>b_UidSearch_SetDipDoneBit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sls10ere_swi_bif.o(i.b_UidSearch_SetDipDoneBit))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
</UL>

<P><STRONG><a name="[dd]"></a>b_pop</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sls10ere_swi_bif.o(i.b_pop))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
</UL>

<P><STRONG><a name="[d9]"></a>b_push</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sls10ere_swi_bif.o(i.b_push))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
</UL>

<P><STRONG><a name="[e2]"></a>board_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, board.o(i.board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = board_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFHALSetTauSWI_BIF
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_Test_Init
</UL>

<P><STRONG><a name="[7c]"></a>dwordvec_163_copy</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sls10ere_math.o(i.dwordvec_163_copy))
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_math.o(i.gf2n_init)
</UL>
<P><STRONG><a name="[82]"></a>dwordvec_193_copy</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sls10ere_math.o(i.dwordvec_193_copy))
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_math.o(i.gf2n_init)
</UL>
<P><STRONG><a name="[fe]"></a>dwordvec_add</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, sls10ere_math.o(i.dwordvec_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dwordvec_add
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_2_power
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfp_divide
</UL>

<P><STRONG><a name="[a6]"></a>dwordvec_cmp</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, sls10ere_math.o(i.dwordvec_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dwordvec_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfp_divide
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2n_divide
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
</UL>

<P><STRONG><a name="[a5]"></a>dwordvec_iszero</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, sls10ere_math.o(i.dwordvec_iszero))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfp_divide
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2n_divide
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_on_curve
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_mul_projective
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_add_point_x
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_mac
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
</UL>

<P><STRONG><a name="[79]"></a>dwordvec_l_shift_163</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, sls10ere_math.o(i.dwordvec_l_shift_163))
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_math.o(i.gf2n_init)
</UL>
<P><STRONG><a name="[7f]"></a>dwordvec_l_shift_193</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, sls10ere_math.o(i.dwordvec_l_shift_193))
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_math.o(i.gf2n_init)
</UL>
<P><STRONG><a name="[a8]"></a>dwordvec_sub</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, sls10ere_math.o(i.dwordvec_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dwordvec_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfp_divide
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
</UL>

<P><STRONG><a name="[fc]"></a>dwordvec_swap</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, sls10ere_math.o(i.dwordvec_swap))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfp_divide
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2n_divide
</UL>

<P><STRONG><a name="[ab]"></a>ecc_add_point_x</STRONG> (Thumb, 376 bytes, Stack size 176 bytes, sls10ere_math.o(i.ecc_add_point_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ecc_add_point_x &rArr; gf2n_divide &rArr; remove_x_power
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2n_divide
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_iszero
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
</UL>

<P><STRONG><a name="[a4]"></a>ecc_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sls10ere_math.o(i.ecc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ecc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2n_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_checkvalue
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_challenge
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
</UL>

<P><STRONG><a name="[aa]"></a>ecc_mul_projective</STRONG> (Thumb, 312 bytes, Stack size 256 bytes, sls10ere_math.o(i.ecc_mul_projective))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = ecc_mul_projective &rArr; mont_ecc_mul &rArr; mont_ecc_add
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mont_ecc_mul
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_iszero
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
</UL>

<P><STRONG><a name="[a7]"></a>ecc_point_on_curve</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, sls10ere_math.o(i.ecc_point_on_curve))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ecc_point_on_curve
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_iszero
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
</UL>

<P><STRONG><a name="[e7]"></a>generate_challenge</STRONG> (Thumb, 48 bytes, Stack size 136 bytes, sls10ere_math.o(i.generate_challenge))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = generate_challenge &rArr; mont_ecc_mul &rArr; mont_ecc_add
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mont_ecc_mul
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2n_divide
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_generate_challenge
</UL>

<P><STRONG><a name="[e8]"></a>generate_checkvalue</STRONG> (Thumb, 48 bytes, Stack size 144 bytes, sls10ere_math.o(i.generate_checkvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = generate_checkvalue &rArr; mont_ecc_mul &rArr; mont_ecc_add
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mont_ecc_mul
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2n_divide
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_generate_checkvalue
</UL>

<P><STRONG><a name="[b5]"></a>get_pin</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, board.o(i.get_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_GetInput
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_EINT
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReceiveWord
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DIP1
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DIP0
</UL>

<P><STRONG><a name="[7d]"></a>gf2_163_add</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sls10ere_math.o(i.gf2_163_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gf2_163_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_math.o(i.gf2n_init)
</UL>
<P><STRONG><a name="[7e]"></a>gf2_163_mul</STRONG> (Thumb, 174 bytes, Stack size 528 bytes, sls10ere_math.o(i.gf2_163_mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = gf2_163_mul &rArr; gf2_163_reduction
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precompute
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2_163_sum
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2_163_reduction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_math.o(i.gf2n_init)
</UL>
<P><STRONG><a name="[f9]"></a>gf2_163_reduction</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, sls10ere_math.o(i.gf2_163_reduction))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gf2_163_reduction
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2_163_square
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2_163_mul
</UL>

<P><STRONG><a name="[7b]"></a>gf2_163_square</STRONG> (Thumb, 262 bytes, Stack size 68 bytes, sls10ere_math.o(i.gf2_163_square))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gf2_163_square &rArr; gf2_163_reduction
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2_163_reduction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_math.o(i.gf2n_init)
</UL>
<P><STRONG><a name="[7a]"></a>gf2_163_sum</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, sls10ere_math.o(i.gf2_163_sum))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2_163_mul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_math.o(i.gf2n_init)
</UL>
<P><STRONG><a name="[83]"></a>gf2_193_add</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sls10ere_math.o(i.gf2_193_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gf2_193_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_math.o(i.gf2n_init)
</UL>
<P><STRONG><a name="[84]"></a>gf2_193_mul</STRONG> (Thumb, 174 bytes, Stack size 528 bytes, sls10ere_math.o(i.gf2_193_mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = gf2_193_mul &rArr; gf2_193_reduction
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precompute
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2_193_sum
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2_193_reduction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_math.o(i.gf2n_init)
</UL>
<P><STRONG><a name="[fa]"></a>gf2_193_reduction</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, sls10ere_math.o(i.gf2_193_reduction))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gf2_193_reduction
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2_193_square
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2_193_mul
</UL>

<P><STRONG><a name="[81]"></a>gf2_193_square</STRONG> (Thumb, 308 bytes, Stack size 68 bytes, sls10ere_math.o(i.gf2_193_square))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gf2_193_square &rArr; gf2_193_reduction
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2_193_reduction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_math.o(i.gf2n_init)
</UL>
<P><STRONG><a name="[80]"></a>gf2_193_sum</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, sls10ere_math.o(i.gf2_193_sum))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2_193_mul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_math.o(i.gf2n_init)
</UL>
<P><STRONG><a name="[f4]"></a>gf2n_divide</STRONG> (Thumb, 146 bytes, Stack size 104 bytes, sls10ere_math.o(i.gf2n_divide))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gf2n_divide &rArr; remove_x_power
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_x_power
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_swap
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_iszero
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_add_point_x
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_checkvalue
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_challenge
</UL>

<P><STRONG><a name="[f5]"></a>gf2n_init</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, sls10ere_math.o(i.gf2n_init))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_mac
</UL>

<P><STRONG><a name="[a9]"></a>gfp_divide</STRONG> (Thumb, 148 bytes, Stack size 104 bytes, sls10ere_math.o(i.gfp_divide))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gfp_divide &rArr; remove_2_power &rArr; dwordvec_add
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_2_power
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_swap
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_sub
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_iszero
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_cmp
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_add
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
</UL>

<P><STRONG><a name="[109]"></a>mac_algorithm_80</STRONG> (Thumb, 636 bytes, Stack size 80 bytes, sls10ere_math.o(i.mac_algorithm_80))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mac_algorithm_80
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_mac
</UL>

<P><STRONG><a name="[93]"></a>main</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = main &rArr; Sls10ere_Run_Test &rArr; Sls10ere_ECC_Test &rArr; Sls10ere_ECC &rArr; Sls10ere_write_challenge_read_response &rArr; Sls10ere_read_response &rArr; SWI_BIFTransReadMultUint8 &rArr; SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_Test_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_Run_Test
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ff]"></a>mont_ecc_add</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, sls10ere_math.o(i.mont_ecc_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mont_ecc_add
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mont_ecc_mul
</UL>

<P><STRONG><a name="[100]"></a>mont_ecc_double</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, sls10ere_math.o(i.mont_ecc_double))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mont_ecc_double
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mont_ecc_mul
</UL>

<P><STRONG><a name="[f6]"></a>mont_ecc_mul</STRONG> (Thumb, 380 bytes, Stack size 104 bytes, sls10ere_math.o(i.mont_ecc_mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mont_ecc_mul &rArr; mont_ecc_add
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mont_ecc_double
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mont_ecc_add
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_mul_projective
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_checkvalue
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_challenge
</UL>

<P><STRONG><a name="[f8]"></a>precompute</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, sls10ere_math.o(i.precompute))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = precompute
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2_193_mul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2_163_mul
</UL>

<P><STRONG><a name="[101]"></a>r_shift</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, sls10ere_math.o(i.r_shift))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_x_power
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_2_power
</UL>

<P><STRONG><a name="[fd]"></a>remove_2_power</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, sls10ere_math.o(i.remove_2_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = remove_2_power &rArr; dwordvec_add
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_shift
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_add
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfp_divide
</UL>

<P><STRONG><a name="[fb]"></a>remove_x_power</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sls10ere_math.o(i.remove_x_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = remove_x_power
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2n_divide
</UL>

<P><STRONG><a name="[b9]"></a>set_pin</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, board.o(i.set_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetOutputLow
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetOutputHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_WakeUpFromPWDN
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_HardRST
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_Abort_EINT
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>

<P><STRONG><a name="[b8]"></a>set_pin_dir</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, board.o(i.set_pin_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_WakeUpFromPWDN
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_HardRST
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_Abort_EINT
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>

<P><STRONG><a name="[e4]"></a>sha256</STRONG> (Thumb, 38 bytes, Stack size 120 bytes, sls10ere_math.o(i.sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = sha256 &rArr; sha256_update &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_update
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_final
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_authenticate
</UL>

<P><STRONG><a name="[108]"></a>sha256_compress</STRONG> (Thumb, 578 bytes, Stack size 112 bytes, sls10ere_math.o(i.sha256_compress))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sha256_compress
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_update
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_final
</UL>

<P><STRONG><a name="[107]"></a>sha256_final</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, sls10ere_math.o(i.sha256_final))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sha256_final &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_compress
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256
</UL>

<P><STRONG><a name="[105]"></a>sha256_init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sls10ere_math.o(i.sha256_init))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256
</UL>

<P><STRONG><a name="[106]"></a>sha256_update</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, sls10ere_math.o(i.sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = sha256_update &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_compress
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256
</UL>

<P><STRONG><a name="[d5]"></a>test_fail</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, board.o(i.test_fail))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = test_fail &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetMode
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFDelay
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetOutputLow
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetOutputHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_Test_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_Run_Test
</UL>

<P><STRONG><a name="[d4]"></a>test_output</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, board.o(i.test_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = test_output
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_Run_Test
</UL>

<P><STRONG><a name="[d6]"></a>test_pass</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, board.o(i.test_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = test_pass &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetMode
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFDelay
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetOutputHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_Run_Test
</UL>

<P><STRONG><a name="[e3]"></a>timing_init</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, board.o(i.timing_init))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_Test_Init
</UL>

<P><STRONG><a name="[e0]"></a>ub_SizeOfStack</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sls10ere_swi_bif.o(i.ub_SizeOfStack))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
</UL>

<P><STRONG><a name="[be]"></a>udelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, board.o(i.udelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_Test_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_Abort_EINT
</UL>

<P><STRONG><a name="[e5]"></a>verify_mac</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, sls10ere_math.o(i.verify_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = verify_mac &rArr; mac_algorithm_80
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_algorithm_80
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2n_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_iszero
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_mac_verify
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_authenticate
</UL>

<P><STRONG><a name="[8b]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[13c]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[13d]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[f7]"></a>XMC_GPIO_GetInput</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board.o(i.XMC_GPIO_GetInput))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
</UL>

<P><STRONG><a name="[102]"></a>XMC_GPIO_SetOutputHigh</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, board.o(i.XMC_GPIO_SetOutputHigh))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pin
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_pass
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_fail
</UL>

<P><STRONG><a name="[103]"></a>XMC_GPIO_SetOutputLow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, board.o(i.XMC_GPIO_SetOutputLow))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pin
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_fail
</UL>

<P><STRONG><a name="[77]"></a>Sls10ere_authenticate</STRONG> (Thumb, 172 bytes, Stack size 160 bytes, sls10ere_crypto.o(i.Sls10ere_authenticate))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = Sls10ere_authenticate &rArr; ECDSA_verify &rArr; ecc_mul_projective &rArr; mont_ecc_mul &rArr; mont_ecc_add
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_mac
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_memset
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_crypto.o(i.Sls10ere_RegisterCrypto)
</UL>
<P><STRONG><a name="[75]"></a>Sls10ere_generate_challenge</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sls10ere_crypto.o(i.Sls10ere_generate_challenge))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Sls10ere_generate_challenge &rArr; generate_challenge &rArr; mont_ecc_mul &rArr; mont_ecc_add
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_challenge
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_rand
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_crypto.o(i.Sls10ere_RegisterCrypto)
</UL>
<P><STRONG><a name="[76]"></a>Sls10ere_generate_checkvalue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sls10ere_crypto.o(i.Sls10ere_generate_checkvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Sls10ere_generate_checkvalue &rArr; generate_checkvalue &rArr; mont_ecc_mul &rArr; mont_ecc_add
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_checkvalue
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_crypto.o(i.Sls10ere_RegisterCrypto)
</UL>
<P><STRONG><a name="[74]"></a>Sls10ere_initialize_crypto</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sls10ere_crypto.o(i.Sls10ere_initialize_crypto))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Sls10ere_initialize_crypto &rArr; Sls10ere_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_crypto.o(i.Sls10ere_RegisterCrypto)
</UL>
<P><STRONG><a name="[78]"></a>Sls10ere_mac_verify</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, sls10ere_crypto.o(i.Sls10ere_mac_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Sls10ere_mac_verify &rArr; verify_mac &rArr; mac_algorithm_80
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_mac
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_crypto.o(i.Sls10ere_RegisterCrypto)
</UL>
<P><STRONG><a name="[d2]"></a>Sls10ere_memcpy</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sls10ere_crypto.o(i.Sls10ere_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sls10ere_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_mac_verify
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_initialize_crypto
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_generate_checkvalue
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_generate_challenge
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_authenticate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_RegisterCrypto
</UL>

<P><STRONG><a name="[d1]"></a>Sls10ere_memset</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sls10ere_crypto.o(i.Sls10ere_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Sls10ere_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_authenticate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_RegisterCrypto
</UL>

<P><STRONG><a name="[e6]"></a>Sls10ere_rand</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sls10ere_crypto.o(i.Sls10ere_rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sls10ere_rand
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_generate_challenge
</UL>

<P><STRONG><a name="[73]"></a>Sls10ere_unregister</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sls10ere_crypto.o(i.Sls10ere_unregister))
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_crypto.o(i.Sls10ere_RegisterCrypto)
</UL>
<P><STRONG><a name="[ad]"></a>SWI_BIFTransCheckBitInversion</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, swi_hal.o(i.SWI_BIFTransCheckBitInversion))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransProcessReceivedWord
</UL>

<P><STRONG><a name="[ae]"></a>SWI_BIFTransCheckParityBit</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, swi_hal.o(i.SWI_BIFTransCheckParityBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SWI_BIFTransCheckParityBit
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransProcessReceivedWord
</UL>

<P><STRONG><a name="[ac]"></a>SWI_BIFTransProcessReceivedWord</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, swi_hal.o(i.SWI_BIFTransProcessReceivedWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransCheckParityBit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransCheckBitInversion
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReceiveWord
</UL>

<P><STRONG><a name="[b1]"></a>SWI_BIFTransReceiveWord</STRONG> (Thumb, 546 bytes, Stack size 112 bytes, swi_hal.o(i.SWI_BIFTransReceiveWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFDelay
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransProcessReceivedWord
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReadUint16
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReadUint8
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReadMultUint8
</UL>

<P><STRONG><a name="[b0]"></a>SWI_BIFTransSendWord</STRONG> (Thumb, 630 bytes, Stack size 24 bytes, swi_hal.o(i.SWI_BIFTransSendWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pin_dir
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pin
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFDelay
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransTreatInvertFlag
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSetParityBits
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_WD
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransWriteUint16
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReadUint16
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_EINT
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransWriteUint8
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransWriteMultUint8
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReadUint8
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReadMultUint8
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_SDA
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DISS
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DIP1
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DIP0
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DIE1
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DIE0
</UL>

<P><STRONG><a name="[b6]"></a>SWI_BIFTransSetParityBits</STRONG> (Thumb, 370 bytes, Stack size 0 bytes, swi_hal.o(i.SWI_BIFTransSetParityBits))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>

<P><STRONG><a name="[b7]"></a>SWI_BIFTransTreatInvertFlag</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, swi_hal.o(i.SWI_BIFTransTreatInvertFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SWI_BIFTransTreatInvertFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>

<P><STRONG><a name="[ef]"></a>delay</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, system_xmc4700.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockSetup
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
